/*
    Reprise du probleme precedent sans parallelisation mais avec conditions aux 
    limites mixtes Dirichlet / Neumann, on decompose le bord en deux sous 
    domaines par le diametre vertical du cercle.

    On considere toujours

                        u : x, y |--> 1 - x^2 - y^2 

    Le demi-cercle de gauche est muni de la condition de Dirichlet homogene 
    tandis que le demi-cercle de droite est muni de condition de Neumann, 
    laquelle s'ecrit Ã  l'aide du produit scalaire du plan

                    du/dn(x, y) = ( nabla(u) | n )

    nabla etant le symbole u |--> (dx(u), dy(u))^T et n le vecteur unitaire 
    normal sortant du cercle definissant le bord.

                        nabla(u) = (-2 x, -2 y)

    - Solution exacte
    - Maillage du domaine par ses bords
    - Declaration du cadre fonctionnel
    - Resolution du probleme variationnel
    - Visualisation

    auteur : Julien VALENTIN
    date   : 10 mai 2022

    execution dans un terminal externe
    ----------------------------------
    FreeFem++ "C:\Users\julien\Documents\GitHub\Scikit\fr\edp\poisson\FreeFem\03_poisson2d_cl_mixtes.edp" -v 0
*/

// Solution exacte
func u = 1 - x^2 - y^2;

/*
    Maillage du domaine : le bord est decompose en bord de Dirichlet Cd et en
    bord de Neumann Cn. On place npoints par ensemble composant le bord. Le 
    cercle est donc muni de 2*npoints points.
*/
border Cd(t=-pi/2, pi/2){
    x = cos(t);
    y = sin(t);
    label = 1;
}
border Cn(t=-pi/2, pi/2){
    x = -cos(t);
    y = -sin(t);
    label = 2;
}

int npoints = 256;
mesh Th = buildmesh( Cd(npoints) + Cn(npoints) );

// Definition du cadre fonctionnel
fespace Vh(Th, P1);
Vh uh, vh;

// Resolution du probleme variationnel
solve poisson2d(uh, vh) = int2d(Th)( dx(uh)*dx(vh) + dy(uh)*dy(vh) ) - int2d(Th)( 4 * vh ) - int1d(Th, 2)( -2*vh ) + on(1, uh=0);

// Visualisation
plot(uh, cmm="Uh", value=true, wait=true);