/*
    Implementation d'une methode de resolution du probleme d'optimisation 
    associe au probleme de Poisson lineaire modele. On rappelle que
    
                    u(x, y) = 1 - x^2 - y^2

    est solution du probleme de Poisson pour les conditions de Dirichlet, sur 
    le disque unite

                    -( d2u/dx2 + d2u/dy2 ) = 4
                                u(||x||=1) = 0
    
    La formulation variationnelle abstraite associee s'ecrit a l'aide de la 
    forme lineaire

        F(u, v) = \int_\Omega \nabla u^T \nabla v - \int_\Omega 4 * v

    La partie impliquant l'inconnue u est symetrique. On obtient un probleme
    d'optimisation en regardant J(u) = F(u, u). La partie quadratique en u est 
    symetrique, on peut donc appeler la fonction FreeFem++ : AffineCG().

    auteur : Julien VALENTIN
    date   : 11/05/2022

    execution dans un terminal externe
    ----------------------------------
    FreeFem++ C:\Users\julien\Documents\GitHub\Scikit\fr\edp\poisson\FreeFem\06_poisson2d_optimisation.edp -ns
*/

// Solution exacte
func u = 1 - x^2 - y^2;

// Discretisation du bord du disque
int npoints = 128;

border C(t=0, 1){
    x = cos(2*pi*t);
    y = sin(2*pi*t);
    label = 1;
}

// Maillage du disque
mesh Th = buildmesh(C(npoints));

// Cadre variationnel
fespace Vh(Th, P1);
Vh uh, vh;

// Definition du probleme matriciel issu de la formulation variationnelle
varf ah(uh, vh) = int2d(Th)( dx(uh)*dx(vh) + dy(uh)*dy(vh) ) - int2d(Th)( 4*vh ) + on(C, uh=0);
matrix Ah = ah(Vh, Vh);

// Resolution par application de descente de gradient AffineCG()
func real[int] Id(real[int] & uh){ return uh; }
AffineGMRES(Ah, uh[], eps=1e-6, nbiter=10, precon=Id);
