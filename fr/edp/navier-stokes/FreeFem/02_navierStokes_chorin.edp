/*
    On utilise a nouveau l'algorithme de Chorin pour simuler un ecoulement de
    Poiseuille. Ce code ne fonctionne pas : la solution explose a mesure que 
    le temps passe. To do : reprendre l'analyse. 

    auteur : Julien VALENTIN
    date   : 26/05/2022

    execution dans un terminal externe
    ----------------------------------
    FreeFem++ "C:\Users\julien\Desktop\scikit\fr\edp\navier-stokes\FreeFem\02_navierStokes_chorin.edp" -ns
*/
int debug=0;

// Discretisation temporelle
real t;
real T = 1;
real dt = 0.1;

// Maillage du domaine
int nely = 32;

real l = 5;
real h = 1;

mesh Th = square(int(l/h)*nely, nely, [l*x, h*y]);
plot(cmm="Maillage de la cavite", Th, wait=debug);

// Caracterisation du fluide
real nu = 1;
real rho = 1;

// Declaration du cadre fonctionnel
fespace V(Th, P1);

V vx, vy;
V w;
V p;
V q;

// Definition des operateurs d'evolution dtMx, dtMy
matrix dtMx, dtMy;
{
    varf M(unused, w) = int2d(Th)( w );
    varf Dx(v, w) = int2d(Th)( w*dx(v)*dt );
    varf Dy(v, w) = int2d(Th)( w*dy(v)*dt );

    real[int] Ml = M(0, V);
    real[int] un(V.ndof);
    un = 1;

    real[int] dM = un ./ Ml;
    matrix DM = dM;

    matrix Mdx = Dx(V, V);
    matrix Mdy = Dy(V, V);

    dtMx = DM * Mdx;
    dtMy = DM * Mdy;
}

// Extrapolation temporelle
real r = 1;

for(int i=0; i < T/dt; i++){
    t = (i+1)*dt;

    V oldvx = vx;
    V oldvy = vy;
    V oldp = p;

    solve xpred(vx, w)
        = int2d(Th)( vx*w/dt + nu * (dx(vx)*dx(w) + dy(vx)*dy(w)) )
        - int2d(Th)( convect([oldvx, oldvy], -dt, oldvx) * w / dt - dx(p) * w )
        + on(1, 3, vx = 0)
        ; 

    solve ypred(vy, w)
        = int2d(Th)( vy*w/dt + nu * (dx(vy)*dx(w) + dy(vy)*dy(w)) )
        - int2d(Th)( convect([oldvx, oldvy], -dt, oldvy) * w / dt - dy(p) * w )
        + on(1, 2, 3, 4, vy = 0 )
        ;

    solve proj(q, w)
        = int2d(Th)( dx(q)*dx(w) + dy(q)*dy(w) )
        - int2d(Th)( (dx(vx) + dy(vy)) * w / dt )
        + on(2, q = 0)
        + on(4, q = -3)
        ;

    p = oldp - q;
    vx[] += dtMx * q[];
    vy[] += dtMy * q[]; 

    plot([vx, vy], p, cmm="t = " + t, value=1);

}